using eSyaPayrollExpat.DL.Entities;
using eSyaPayrollExpat.DO;
using eSyaPayrollExpat.IF;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace eSyaPayrollExpat.DL.Repository
{
    public class VariableEntryRepository : IVariableEntryRepository
    {
        #region Salary Advance

        public async Task<List<DO_EmployeeMaster>> GetEmployeesbyBusinessKey(int Businesskey)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtPyexem.Where(e => e.ActiveStatus == true && e.BusinessKey== Businesskey)
                        .Select(x=> new DO_EmployeeMaster
                        {
                           EmployeeNumber=x.EmployeeNumber,
                           EmployeeName=x.EmployeeName
                        }).OrderBy(x=>x.EmployeeName).ToListAsync();

                    return await ds;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_AdvanceSalary>> GetSalariesbyBusinessKeyAndPayPeriod(int Businesskey ,int Payperiod)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtPyexva.Where(x => x.BusinessKey == Businesskey && x.PayPeriod==Payperiod).Join(db.GtPyexem.Where(x=>x.BusinessKey==Businesskey),
                         x => x.EmployeeNumber,
                         y => y.EmployeeNumber,
                        (x, y) => new DO_AdvanceSalary
                        {
                            BusinessKey = x.BusinessKey,
                            EmployeeNumber = x.EmployeeNumber,
                            EmployeeName = y.EmployeeName,
                            PayPeriod = x.PayPeriod,
                            SalaryAdvance = x.SalaryAdvance,
                            ActiveStatus = x.ActiveStatus,
                        }).ToListAsync();

                    return await ds;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertAdvanceSalary(DO_AdvanceSalary obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtPyexva _isvarExists = db.GtPyexva.FirstOrDefault(v => v.BusinessKey == obj.BusinessKey && v.PayPeriod == obj.PayPeriod && v.EmployeeNumber == obj.EmployeeNumber);

                        if (_isvarExists == null)
                        {
                            var var_Entry = new GtPyexva
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                PayPeriod = obj.PayPeriod,
                                SalaryAdvance = obj.SalaryAdvance,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtPyexva.Add(var_Entry);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Advance Salary Created Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Advance Salary is already Exists." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateAdvanceSalary(DO_AdvanceSalary obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtPyexva ad_sal = db.GtPyexva.FirstOrDefault(v => v.BusinessKey == obj.BusinessKey && v.PayPeriod == obj.PayPeriod && v.EmployeeNumber == obj.EmployeeNumber);

                        if (ad_sal != null)
                        {
                            ad_sal.SalaryAdvance = obj.SalaryAdvance;
                            ad_sal.ActiveStatus = obj.ActiveStatus;
                            ad_sal.ModifiedBy = obj.UserID;
                            ad_sal.ModifiedOn = System.DateTime.Now;
                            ad_sal.ModifiedTerminal = obj.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Advance Salary Updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Couldn't find Advance Salary." };
                        }

                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Salary Advance

        #region Variable Incentive

        public async Task<List<DO_VariableIncentive>> GetIncentiesbyBusinessKeyAndPayPeriod(int Businesskey, int Payperiod)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtPyexvi.Where(x => x.BusinessKey == Businesskey && x.PayPeriod==Payperiod).Join(db.GtPyexem.Where(x => x.BusinessKey == Businesskey),
                         x => x.EmployeeNumber,
                         y => y.EmployeeNumber,
                        (x, y) => new DO_VariableIncentive
                        {
                            BusinessKey = x.BusinessKey,
                            EmployeeNumber = x.EmployeeNumber,
                            EmployeeName = y.EmployeeName,
                            PayPeriod = x.PayPeriod,
                            VariableIncentiveAmount = x.VariableIncentiveAmount,
                            ActiveStatus = x.ActiveStatus,
                        }).ToListAsync();

                    return await ds;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertVariableIncentive(DO_VariableIncentive obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtPyexvi _isIncentiveExists = db.GtPyexvi.FirstOrDefault(v => v.BusinessKey == obj.BusinessKey && v.PayPeriod == obj.PayPeriod && v.EmployeeNumber == obj.EmployeeNumber);

                        if (_isIncentiveExists == null)
                        {
                            var var_Incentive = new GtPyexvi
                            {
                                BusinessKey = obj.BusinessKey,
                                EmployeeNumber = obj.EmployeeNumber,
                                PayPeriod = obj.PayPeriod,
                                VariableIncentiveAmount = obj.VariableIncentiveAmount,
                                ActiveStatus = obj.ActiveStatus,
                                FormId = obj.FormId,
                                CreatedBy = obj.UserID,
                                CreatedOn = System.DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtPyexvi.Add(var_Incentive);
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Incentive Created Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Incentive is already Exists." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateVariableIncentive(DO_VariableIncentive obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtPyexvi Incentive = db.GtPyexvi.FirstOrDefault(v => v.BusinessKey == obj.BusinessKey && v.PayPeriod == obj.PayPeriod && v.EmployeeNumber == obj.EmployeeNumber);

                        if (Incentive != null)
                        {
                            Incentive.VariableIncentiveAmount = obj.VariableIncentiveAmount;
                            Incentive.ActiveStatus = obj.ActiveStatus;
                            Incentive.ModifiedBy = obj.UserID;
                            Incentive.ModifiedOn = System.DateTime.Now;
                            Incentive.ModifiedTerminal = obj.TerminalID;
                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Incentive Updated Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Couldn't find Incentive." };
                        }

                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Variable Incentive
    }
}
